# This is a basic workflow that is manually triggered

name: Performance Test Workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      users:
        description: 'Number of concurrent users to test'
        default: '40'
        required: true
      hours:
        description: 'Duration of test'
        default: '24'
        required: true
      reportname:
        description: 'Valid reportname'
      create_patients:
        description: 'Enter number of patients to be created'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  create-patients:
    name: Create patients
    if: ${{ github.event.inputs.create_patients > 0}}
    runs-on: ubuntu-latest
    outputs:
      epoch: ${{ steps.getEpoch.outputs.epoch }}
    steps:
      - name: Checkout Performance Test Suite
        uses: actions/checkout@v3
        with:
          repository: bahmni/performance-test
          ref: workflowAutomation
          path: performance-test
      - name: Checkout test data generator
        uses: actions/checkout@v3
        with:
          repository: bahmni/bahmni-test-data-generator
          path: test-data-generator
      - name: Generate Test Data
        working-directory: test-data-generator/
        run: |
          if [[ ${{ github.event.inputs.create_patients }} -gt '500' ]]; then
            export PATIENT_COUNT=${{ github.event.inputs.create_patients }}
            echo $PATIENT_COUNT
          else
            export PATIENT_COUNT='10'
            echo $PATIENT_COUNT
          fi
          ./gradlew build
          ./gradlew run
      - name: Copy registrations csv to Performance Test Suite
        run: cp -r test-data-generator/output/registrations.csv performance-test/src/gatling/resources
      - id: getEpoch
        name: Run Epoch
        run: |
          export EPOCH=$(date +%s)
          echo "epoch=$EPOCH" >> $GITHUB_OUTPUT
      - name: Commit and push the registration csv file
        working-directory: performance-test/
        run: |
          git config user.name ${{ secrets.BAHMNI_USERNAME}}
          git config user.email ${{ secrets.BAHMNI_EMAIL}}
          git pull
          git add src/gatling/resources/registrations.csv
          git commit -m "Adding updated registration csv at ${{ steps.getEpoch.outputs.epoch }}"
          git push 'https://${{ secrets.BAHMNI_USERNAME}}:${{ secrets.BAHMNI_PAT}}@github.com/bahmni/performance-test.git' workflowAutomation

  run-performance-test:
    name: Run Performance Test
    needs:
      - create-patients
    runs-on: ubuntu-latest
    env:
      CLUSTER_NAME: bahmni-cluster-nonprod
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.BAHMNI_AWS_ID }}
          aws-secret-access-key: ${{ secrets.BAHMNI_AWS_SECRET }}
          aws-region: ap-south-1
          role-to-assume: ${{ secrets.BAHMNI_INFRA_ADMIN_ROLE }}
          role-duration-seconds: 1200  # 20 mins
          role-session-name: BahmniInfraAdminSession
      - name: Connect to Performance Test AWS EC2 instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=performance-instance" "Name=instance-state-name,Values=running" --query "Reservations[].Instances[].InstanceId" --output text)

          if [ -z "$INSTANCE_ID" ]; then
            aws ec2 start-instances --instance-ids $(aws ec2 describe-instances --filters "Name=tag:Name,Values=performance-instance" --query "Reservations[].Instances[].InstanceId" --output text --region ap-south-1) --region ap-south-1
            echo "Performance test instance started"
            sleep 5s
          else
            echo "Performance test instance is already running"
          fi
      - name: Start the test
        run: |
          aws ssm send-command \
          --instance-ids "$INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --comment "Update running containers" \
          --parameters '{
              "commands": [
                "export newEpoch=$(date +%s)"
                "mkdir $newEpoch"
              ],
              "workingDirectory": [
                "/home/ubuntu/Bahmni/scripts"
            ]
          }' | jq '.Command | {CommandId: .CommandId, Parameters: .Parameters, Status: .Status}'
