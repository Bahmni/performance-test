# This is a basic workflow that is manually triggered

name: Performance Test Workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      users:
        description: 'Number of concurrent users to test'
        default: '40'
        required: true
      hours:
        description: 'Duration of test'
        default: '24'
        required: true
      reportname:
        description: 'Valid reportname'
      create_patients:
        description: 'Enter number of patients to be created'
        default: '0'
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  run-performance-test:
    name: Run Performance Test
    runs-on: ubuntu-latest
    env:
      CLUSTER_NAME: bahmni-cluster-nonprod
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.BAHMNI_AWS_ID }}
          aws-secret-access-key: ${{ secrets.BAHMNI_AWS_SECRET }}
          aws-region: ap-south-1
          role-to-assume: arn:aws:iam::863324974761:role/BahmniInfraAdminRoleForIAMUsers
          role-duration-seconds: 1200  # 20 mins
          role-session-name: BahmniInfraAdminSession
#    # Runs a single command using the runners shell
#      - name: Start Performance Test AWS EC2
#        run: |
#          aws ec2 start-instances --instance-ids $(aws ec2 describe-instances --filters "Name=tag:Name,Values=performance-instance" --query "Reservations[].Instances[].InstanceId" --output text --region ap-south-1) --region ap-south-1
      - name: Connect to Performance Test AWS EC2 instance
        run: |
            INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=performance-instance" "Name=instance-state-name,Values=running" --query "Reservations[].Instances[].InstanceId" --output text)

            if [ -z "$INSTANCE_ID" ]; then
              aws ec2 start-instances --instance-ids $(aws ec2 describe-instances --filters "Name=tag:Name,Values=performance-instance" --query "Reservations[].Instances[].InstanceId" --output text --region ap-south-1) --region ap-south-1
              echo "Performance test instance started"
              sleep 5s
            else
              echo "Performance test instance is already running"
            fi
      - name: Create patients
        run: |
          if [[ ${{ github.event.inputs.create_patients }} -gt '0' ]]; then
            echo "Create Patients"
          fi
#      - name: Start the test
#        run: |
#          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=performance-instance" "Name=instance-state-name,Values=running" --query "Reservations[].Instances[].InstanceId" --output text)
#
#          if [ -z "$INSTANCE_ID" ]; then
#            aws ec2 start-instances --instance-ids $(aws ec2 describe-instances --filters "Name=tag:Name,Values=performance-instance" --query "Reservations[].Instances[].InstanceId" --output text --region ap-south-1) --region ap-south-1
#            echo "Performance test instance started"
#            sleep 5s
#          else
#            aws ssm send-command \
#            --instance-ids "$INSTANCE_ID" \
#            --document-name "AWS-RunShellScript" \
#            --comment "Update running containers" \
#            --parameters '{
#                "commands": [
#                  "mkdir testGA"
#                ],
#                "workingDirectory": [
#                  "/home/ubuntu/Bahmni/scripts"
#              ]
#            }' | jq '.Command | {CommandId: .CommandId, Parameters: .Parameters, Status: .Status}'
#          fi
